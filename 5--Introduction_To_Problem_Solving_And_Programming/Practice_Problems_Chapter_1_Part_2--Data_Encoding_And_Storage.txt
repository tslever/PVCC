Practice Problems Ch. 1 Part 2 (Data Encoding And Storage)

Created: 09/14/2023 by Tom Lever
Updated: 09/14/2023 by Tom Lever

24a, 24b, 26j, 27d, 30a, 30b, 31a, 31b, 32d, 34e and 36a


24a. Write the number 23 by representing the 2 and 3 in ASCII. 50_10 51_10 = 32_16 33_16 = 0x32 0x33
24b. Write the number 23 in binary representation. 23_10 = 10111_2


26j. Convert each of the following binary representations to its equivalent base ten representation: 11001. 11001_2 = 16 + 8 + 1 = 25_10


27d. Convert each of the following base ten representations to its equivalent binary representation: 17. 17_10 = 0001 0001


30a. Convert each of the following two's complement representations to its equivalent base ten representation: 0 1111.

Since leading bit is 0, 0 1111 represents a positive integer.

Since 0 1111 represents a positive integer, multiply each binary digit in place n as 2^{n-1} and add the products: 0 1111 = +15

30b. Convert each of the following two's complement representations to its equivalent base ten representation: 1 0100.

Since leading bit is 1, 1 0100 represents a negative integer.

Since 1 0100 represents a negative integer,

Flip all the bits: 0 1011

Add 1:
   11
0 1011
     1
0 1100

Interpret the result as a binary representation of the magnitude.
Magnitude is 12.

Add a negative sign.
-12


31a. Convert each of the following base ten representations to its equivalent two's complement representation in which each value is represented in 7 bits: 13. 0001101

Since 13 is a positive integer,

Represent 13 as sequence of binary digits: 1101
Pad with 0's to desired bit size: 0001101

31b. Convert each of the following base ten representations to its equivalent two's complement representation in which each value is represented in 7 bits: -13.

Since -13 is a negative integer,

Convert magnitude to binary: 1101
Pad with 0's to desired bit size: 0001101
Invert bits to achieve 1's complement: 1110010
Add 1 to achieve 2's complement: 1110011


32d. Perform each of the following additions assuming the bit strings represent values in two's complement notation. Identify each case in which the answer is incorrect because of overflow.

Add binary numbers:

 111
 10111 = -9
 11010 = -6
 -----
110001 = -15

Discard leading carry out: 10001

There is no overflow.


34e. Convert each of the following binary representations into its equivalent base ten representation: 10.01. 10.01 = 2 + 1/4 = 2.25


36a. Decode the following bit patterns using the floating-point format described in Figure 1.24:

0 101 1001 = 0.1001 * 10^(101 in excess-3 notation) = (1/2 + 1/16) * 2^1 = 9/16 * 2 = 9/8 = 1.125